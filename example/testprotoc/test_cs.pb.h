// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_cs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_5fcs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_5fcs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_5fcs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_5fcs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_5fcs_2eproto;
namespace CSP {
class CsFightReq;
class CsFightReqDefaultTypeInternal;
extern CsFightReqDefaultTypeInternal _CsFightReq_default_instance_;
class CsFightRsp;
class CsFightRspDefaultTypeInternal;
extern CsFightRspDefaultTypeInternal _CsFightRsp_default_instance_;
class CsRankTop3Req;
class CsRankTop3ReqDefaultTypeInternal;
extern CsRankTop3ReqDefaultTypeInternal _CsRankTop3Req_default_instance_;
class CsRankTop3Rsp;
class CsRankTop3RspDefaultTypeInternal;
extern CsRankTop3RspDefaultTypeInternal _CsRankTop3Rsp_default_instance_;
}  // namespace CSP
PROTOBUF_NAMESPACE_OPEN
template<> ::CSP::CsFightReq* Arena::CreateMaybeMessage<::CSP::CsFightReq>(Arena*);
template<> ::CSP::CsFightRsp* Arena::CreateMaybeMessage<::CSP::CsFightRsp>(Arena*);
template<> ::CSP::CsRankTop3Req* Arena::CreateMaybeMessage<::CSP::CsRankTop3Req>(Arena*);
template<> ::CSP::CsRankTop3Rsp* Arena::CreateMaybeMessage<::CSP::CsRankTop3Rsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CSP {

enum EnumCsCmd : int {
  cs_cmd_begin = 0,
  cs_cmd_fight_req = 1,
  cs_cmd_fight_rsp = 2,
  cs_cmd_query_rank_top3_req = 3,
  cs_cmd_query_rank_top3_rsp = 4,
  EnumCsCmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EnumCsCmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EnumCsCmd_IsValid(int value);
constexpr EnumCsCmd EnumCsCmd_MIN = cs_cmd_begin;
constexpr EnumCsCmd EnumCsCmd_MAX = cs_cmd_query_rank_top3_rsp;
constexpr int EnumCsCmd_ARRAYSIZE = EnumCsCmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnumCsCmd_descriptor();
template<typename T>
inline const std::string& EnumCsCmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnumCsCmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnumCsCmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnumCsCmd_descriptor(), enum_t_value);
}
inline bool EnumCsCmd_Parse(
    const std::string& name, EnumCsCmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnumCsCmd>(
    EnumCsCmd_descriptor(), name, value);
}
// ===================================================================

class CsFightReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSP.CsFightReq) */ {
 public:
  CsFightReq();
  virtual ~CsFightReq();

  CsFightReq(const CsFightReq& from);
  CsFightReq(CsFightReq&& from) noexcept
    : CsFightReq() {
    *this = ::std::move(from);
  }

  inline CsFightReq& operator=(const CsFightReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsFightReq& operator=(CsFightReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CsFightReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CsFightReq* internal_default_instance() {
    return reinterpret_cast<const CsFightReq*>(
               &_CsFightReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CsFightReq& a, CsFightReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CsFightReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CsFightReq* New() const final {
    return CreateMaybeMessage<CsFightReq>(nullptr);
  }

  CsFightReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CsFightReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CsFightReq& from);
  void MergeFrom(const CsFightReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsFightReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSP.CsFightReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fcs_2eproto);
    return ::descriptor_table_test_5fcs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFighteridAFieldNumber = 1,
    kFighteridBFieldNumber = 2,
  };
  // uint32 fighterid_a = 1;
  void clear_fighterid_a();
  ::PROTOBUF_NAMESPACE_ID::uint32 fighterid_a() const;
  void set_fighterid_a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fighterid_a() const;
  void _internal_set_fighterid_a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fighterid_b = 2;
  void clear_fighterid_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 fighterid_b() const;
  void set_fighterid_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fighterid_b() const;
  void _internal_set_fighterid_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSP.CsFightReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fighterid_a_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fighterid_b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fcs_2eproto;
};
// -------------------------------------------------------------------

class CsFightRsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSP.CsFightRsp) */ {
 public:
  CsFightRsp();
  virtual ~CsFightRsp();

  CsFightRsp(const CsFightRsp& from);
  CsFightRsp(CsFightRsp&& from) noexcept
    : CsFightRsp() {
    *this = ::std::move(from);
  }

  inline CsFightRsp& operator=(const CsFightRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsFightRsp& operator=(CsFightRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CsFightRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CsFightRsp* internal_default_instance() {
    return reinterpret_cast<const CsFightRsp*>(
               &_CsFightRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CsFightRsp& a, CsFightRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CsFightRsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CsFightRsp* New() const final {
    return CreateMaybeMessage<CsFightRsp>(nullptr);
  }

  CsFightRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CsFightRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CsFightRsp& from);
  void MergeFrom(const CsFightRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsFightRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSP.CsFightRsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fcs_2eproto);
    return ::descriptor_table_test_5fcs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrcodeFieldNumber = 1,
    kWinneridFieldNumber = 2,
  };
  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 winnerid = 2;
  void clear_winnerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 winnerid() const;
  void set_winnerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_winnerid() const;
  void _internal_set_winnerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSP.CsFightRsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 winnerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fcs_2eproto;
};
// -------------------------------------------------------------------

class CsRankTop3Req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSP.CsRankTop3Req) */ {
 public:
  CsRankTop3Req();
  virtual ~CsRankTop3Req();

  CsRankTop3Req(const CsRankTop3Req& from);
  CsRankTop3Req(CsRankTop3Req&& from) noexcept
    : CsRankTop3Req() {
    *this = ::std::move(from);
  }

  inline CsRankTop3Req& operator=(const CsRankTop3Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsRankTop3Req& operator=(CsRankTop3Req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CsRankTop3Req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CsRankTop3Req* internal_default_instance() {
    return reinterpret_cast<const CsRankTop3Req*>(
               &_CsRankTop3Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CsRankTop3Req& a, CsRankTop3Req& b) {
    a.Swap(&b);
  }
  inline void Swap(CsRankTop3Req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CsRankTop3Req* New() const final {
    return CreateMaybeMessage<CsRankTop3Req>(nullptr);
  }

  CsRankTop3Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CsRankTop3Req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CsRankTop3Req& from);
  void MergeFrom(const CsRankTop3Req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsRankTop3Req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSP.CsRankTop3Req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fcs_2eproto);
    return ::descriptor_table_test_5fcs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // int32 order = 1;
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::int32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_order() const;
  void _internal_set_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSP.CsRankTop3Req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fcs_2eproto;
};
// -------------------------------------------------------------------

class CsRankTop3Rsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSP.CsRankTop3Rsp) */ {
 public:
  CsRankTop3Rsp();
  virtual ~CsRankTop3Rsp();

  CsRankTop3Rsp(const CsRankTop3Rsp& from);
  CsRankTop3Rsp(CsRankTop3Rsp&& from) noexcept
    : CsRankTop3Rsp() {
    *this = ::std::move(from);
  }

  inline CsRankTop3Rsp& operator=(const CsRankTop3Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CsRankTop3Rsp& operator=(CsRankTop3Rsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CsRankTop3Rsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CsRankTop3Rsp* internal_default_instance() {
    return reinterpret_cast<const CsRankTop3Rsp*>(
               &_CsRankTop3Rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CsRankTop3Rsp& a, CsRankTop3Rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CsRankTop3Rsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CsRankTop3Rsp* New() const final {
    return CreateMaybeMessage<CsRankTop3Rsp>(nullptr);
  }

  CsRankTop3Rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CsRankTop3Rsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CsRankTop3Rsp& from);
  void MergeFrom(const CsRankTop3Rsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsRankTop3Rsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSP.CsRankTop3Rsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fcs_2eproto);
    return ::descriptor_table_test_5fcs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 3,
    kErrcodeFieldNumber = 1,
    kValidnumFieldNumber = 2,
  };
  // repeated uint32 ids = 3;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ids() const;
  void _internal_add_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ids(int index) const;
  void set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ids();

  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 validnum = 2;
  void clear_validnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 validnum() const;
  void set_validnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_validnum() const;
  void _internal_set_validnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSP.CsRankTop3Rsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 validnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fcs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CsFightReq

// uint32 fighterid_a = 1;
inline void CsFightReq::clear_fighterid_a() {
  fighterid_a_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CsFightReq::_internal_fighterid_a() const {
  return fighterid_a_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CsFightReq::fighterid_a() const {
  // @@protoc_insertion_point(field_get:CSP.CsFightReq.fighterid_a)
  return _internal_fighterid_a();
}
inline void CsFightReq::_internal_set_fighterid_a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fighterid_a_ = value;
}
inline void CsFightReq::set_fighterid_a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fighterid_a(value);
  // @@protoc_insertion_point(field_set:CSP.CsFightReq.fighterid_a)
}

// uint32 fighterid_b = 2;
inline void CsFightReq::clear_fighterid_b() {
  fighterid_b_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CsFightReq::_internal_fighterid_b() const {
  return fighterid_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CsFightReq::fighterid_b() const {
  // @@protoc_insertion_point(field_get:CSP.CsFightReq.fighterid_b)
  return _internal_fighterid_b();
}
inline void CsFightReq::_internal_set_fighterid_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fighterid_b_ = value;
}
inline void CsFightReq::set_fighterid_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fighterid_b(value);
  // @@protoc_insertion_point(field_set:CSP.CsFightReq.fighterid_b)
}

// -------------------------------------------------------------------

// CsFightRsp

// int32 errcode = 1;
inline void CsFightRsp::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CsFightRsp::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CsFightRsp::errcode() const {
  // @@protoc_insertion_point(field_get:CSP.CsFightRsp.errcode)
  return _internal_errcode();
}
inline void CsFightRsp::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void CsFightRsp::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CSP.CsFightRsp.errcode)
}

// uint32 winnerid = 2;
inline void CsFightRsp::clear_winnerid() {
  winnerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CsFightRsp::_internal_winnerid() const {
  return winnerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CsFightRsp::winnerid() const {
  // @@protoc_insertion_point(field_get:CSP.CsFightRsp.winnerid)
  return _internal_winnerid();
}
inline void CsFightRsp::_internal_set_winnerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  winnerid_ = value;
}
inline void CsFightRsp::set_winnerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_winnerid(value);
  // @@protoc_insertion_point(field_set:CSP.CsFightRsp.winnerid)
}

// -------------------------------------------------------------------

// CsRankTop3Req

// int32 order = 1;
inline void CsRankTop3Req::clear_order() {
  order_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CsRankTop3Req::_internal_order() const {
  return order_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CsRankTop3Req::order() const {
  // @@protoc_insertion_point(field_get:CSP.CsRankTop3Req.order)
  return _internal_order();
}
inline void CsRankTop3Req::_internal_set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  order_ = value;
}
inline void CsRankTop3Req::set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:CSP.CsRankTop3Req.order)
}

// -------------------------------------------------------------------

// CsRankTop3Rsp

// int32 errcode = 1;
inline void CsRankTop3Rsp::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CsRankTop3Rsp::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CsRankTop3Rsp::errcode() const {
  // @@protoc_insertion_point(field_get:CSP.CsRankTop3Rsp.errcode)
  return _internal_errcode();
}
inline void CsRankTop3Rsp::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void CsRankTop3Rsp::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CSP.CsRankTop3Rsp.errcode)
}

// uint32 validnum = 2;
inline void CsRankTop3Rsp::clear_validnum() {
  validnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CsRankTop3Rsp::_internal_validnum() const {
  return validnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CsRankTop3Rsp::validnum() const {
  // @@protoc_insertion_point(field_get:CSP.CsRankTop3Rsp.validnum)
  return _internal_validnum();
}
inline void CsRankTop3Rsp::_internal_set_validnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  validnum_ = value;
}
inline void CsRankTop3Rsp::set_validnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_validnum(value);
  // @@protoc_insertion_point(field_set:CSP.CsRankTop3Rsp.validnum)
}

// repeated uint32 ids = 3;
inline int CsRankTop3Rsp::_internal_ids_size() const {
  return ids_.size();
}
inline int CsRankTop3Rsp::ids_size() const {
  return _internal_ids_size();
}
inline void CsRankTop3Rsp::clear_ids() {
  ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CsRankTop3Rsp::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CsRankTop3Rsp::ids(int index) const {
  // @@protoc_insertion_point(field_get:CSP.CsRankTop3Rsp.ids)
  return _internal_ids(index);
}
inline void CsRankTop3Rsp::set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSP.CsRankTop3Rsp.ids)
}
inline void CsRankTop3Rsp::_internal_add_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ids_.Add(value);
}
inline void CsRankTop3Rsp::add_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:CSP.CsRankTop3Rsp.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CsRankTop3Rsp::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CsRankTop3Rsp::ids() const {
  // @@protoc_insertion_point(field_list:CSP.CsRankTop3Rsp.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CsRankTop3Rsp::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CsRankTop3Rsp::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:CSP.CsRankTop3Rsp.ids)
  return _internal_mutable_ids();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CSP

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CSP::EnumCsCmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSP::EnumCsCmd>() {
  return ::CSP::EnumCsCmd_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_5fcs_2eproto
