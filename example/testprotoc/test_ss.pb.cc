// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_ss.proto

#include "test_ss.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace SSP {
class SsQueryPowerReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SsQueryPowerReq> _instance;
} _SsQueryPowerReq_default_instance_;
class SsQueryPowerRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SsQueryPowerRsp> _instance;
} _SsQueryPowerRsp_default_instance_;
class SsDoFightReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SsDoFightReq> _instance;
} _SsDoFightReq_default_instance_;
class SsDoFightRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SsDoFightRsp> _instance;
} _SsDoFightRsp_default_instance_;
class SsReportRankReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SsReportRankReq> _instance;
} _SsReportRankReq_default_instance_;
class SsReportRankRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SsReportRankRsp> _instance;
} _SsReportRankRsp_default_instance_;
class SsDoRankTop3ReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SsDoRankTop3Req> _instance;
} _SsDoRankTop3Req_default_instance_;
class SsDoRankTop3RspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SsDoRankTop3Rsp> _instance;
} _SsDoRankTop3Rsp_default_instance_;
}  // namespace SSP
static void InitDefaultsscc_info_SsDoFightReq_test_5fss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SSP::_SsDoFightReq_default_instance_;
    new (ptr) ::SSP::SsDoFightReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSP::SsDoFightReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SsDoFightReq_test_5fss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SsDoFightReq_test_5fss_2eproto}, {}};

static void InitDefaultsscc_info_SsDoFightRsp_test_5fss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SSP::_SsDoFightRsp_default_instance_;
    new (ptr) ::SSP::SsDoFightRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSP::SsDoFightRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SsDoFightRsp_test_5fss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SsDoFightRsp_test_5fss_2eproto}, {}};

static void InitDefaultsscc_info_SsDoRankTop3Req_test_5fss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SSP::_SsDoRankTop3Req_default_instance_;
    new (ptr) ::SSP::SsDoRankTop3Req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSP::SsDoRankTop3Req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SsDoRankTop3Req_test_5fss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SsDoRankTop3Req_test_5fss_2eproto}, {}};

static void InitDefaultsscc_info_SsDoRankTop3Rsp_test_5fss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SSP::_SsDoRankTop3Rsp_default_instance_;
    new (ptr) ::SSP::SsDoRankTop3Rsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSP::SsDoRankTop3Rsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SsDoRankTop3Rsp_test_5fss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SsDoRankTop3Rsp_test_5fss_2eproto}, {}};

static void InitDefaultsscc_info_SsQueryPowerReq_test_5fss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SSP::_SsQueryPowerReq_default_instance_;
    new (ptr) ::SSP::SsQueryPowerReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSP::SsQueryPowerReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SsQueryPowerReq_test_5fss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SsQueryPowerReq_test_5fss_2eproto}, {}};

static void InitDefaultsscc_info_SsQueryPowerRsp_test_5fss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SSP::_SsQueryPowerRsp_default_instance_;
    new (ptr) ::SSP::SsQueryPowerRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSP::SsQueryPowerRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SsQueryPowerRsp_test_5fss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SsQueryPowerRsp_test_5fss_2eproto}, {}};

static void InitDefaultsscc_info_SsReportRankReq_test_5fss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SSP::_SsReportRankReq_default_instance_;
    new (ptr) ::SSP::SsReportRankReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSP::SsReportRankReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SsReportRankReq_test_5fss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SsReportRankReq_test_5fss_2eproto}, {}};

static void InitDefaultsscc_info_SsReportRankRsp_test_5fss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SSP::_SsReportRankRsp_default_instance_;
    new (ptr) ::SSP::SsReportRankRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSP::SsReportRankRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SsReportRankRsp_test_5fss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SsReportRankRsp_test_5fss_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_test_5fss_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_test_5fss_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_test_5fss_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_test_5fss_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSP::SsQueryPowerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSP::SsQueryPowerReq, fighterid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSP::SsQueryPowerRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSP::SsQueryPowerRsp, errcode_),
  PROTOBUF_FIELD_OFFSET(::SSP::SsQueryPowerRsp, power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSP::SsDoFightReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSP::SsDoFightReq, fighterid_a_),
  PROTOBUF_FIELD_OFFSET(::SSP::SsDoFightReq, power_a_),
  PROTOBUF_FIELD_OFFSET(::SSP::SsDoFightReq, fighterid_b_),
  PROTOBUF_FIELD_OFFSET(::SSP::SsDoFightReq, power_b_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSP::SsDoFightRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSP::SsDoFightRsp, errcode_),
  PROTOBUF_FIELD_OFFSET(::SSP::SsDoFightRsp, winnerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSP::SsReportRankReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSP::SsReportRankReq, fighterid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSP::SsReportRankRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSP::SsReportRankRsp, errcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSP::SsDoRankTop3Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSP::SsDoRankTop3Req, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSP::SsDoRankTop3Rsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSP::SsDoRankTop3Rsp, errcode_),
  PROTOBUF_FIELD_OFFSET(::SSP::SsDoRankTop3Rsp, validnum_),
  PROTOBUF_FIELD_OFFSET(::SSP::SsDoRankTop3Rsp, ids_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SSP::SsQueryPowerReq)},
  { 6, -1, sizeof(::SSP::SsQueryPowerRsp)},
  { 13, -1, sizeof(::SSP::SsDoFightReq)},
  { 22, -1, sizeof(::SSP::SsDoFightRsp)},
  { 29, -1, sizeof(::SSP::SsReportRankReq)},
  { 35, -1, sizeof(::SSP::SsReportRankRsp)},
  { 41, -1, sizeof(::SSP::SsDoRankTop3Req)},
  { 47, -1, sizeof(::SSP::SsDoRankTop3Rsp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SSP::_SsQueryPowerReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SSP::_SsQueryPowerRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SSP::_SsDoFightReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SSP::_SsDoFightRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SSP::_SsReportRankReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SSP::_SsReportRankRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SSP::_SsDoRankTop3Req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SSP::_SsDoRankTop3Rsp_default_instance_),
};

const char descriptor_table_protodef_test_5fss_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rtest_ss.proto\022\003SSP\"$\n\017SsQueryPowerReq\022"
  "\021\n\tfighterid\030\001 \001(\r\"1\n\017SsQueryPowerRsp\022\017\n"
  "\007errcode\030\001 \001(\005\022\r\n\005power\030\002 \001(\r\"Z\n\014SsDoFig"
  "htReq\022\023\n\013fighterid_a\030\001 \001(\r\022\017\n\007power_a\030\002 "
  "\001(\r\022\023\n\013fighterid_b\030\003 \001(\r\022\017\n\007power_b\030\004 \001("
  "\r\"1\n\014SsDoFightRsp\022\017\n\007errcode\030\001 \001(\005\022\020\n\010wi"
  "nnerid\030\002 \001(\r\"$\n\017SsReportRankReq\022\021\n\tfight"
  "erid\030\001 \001(\r\"\"\n\017SsReportRankRsp\022\017\n\007errcode"
  "\030\001 \001(\005\" \n\017SsDoRankTop3Req\022\r\n\005order\030\001 \001(\005"
  "\"A\n\017SsDoRankTop3Rsp\022\017\n\007errcode\030\001 \001(\005\022\020\n\010"
  "validnum\030\002 \001(\r\022\013\n\003ids\030\003 \003(\r*\367\001\n\tEnumSsCm"
  "d\022\020\n\014ss_cmd_begin\020\000\022\032\n\026ss_cmd_query_powe"
  "r_req\020d\022\032\n\026ss_cmd_query_power_rsp\020e\022\024\n\020s"
  "s_cmd_fight_req\020f\022\024\n\020ss_cmd_fight_rsp\020g\022"
  "\031\n\025ss_cmd_reportrank_req\020h\022\031\n\025ss_cmd_rep"
  "ortrank_rsp\020i\022\036\n\032ss_cmd_query_rank_top3_"
  "req\020j\022\036\n\032ss_cmd_query_rank_top3_rsp\020kb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_test_5fss_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_test_5fss_2eproto_sccs[8] = {
  &scc_info_SsDoFightReq_test_5fss_2eproto.base,
  &scc_info_SsDoFightRsp_test_5fss_2eproto.base,
  &scc_info_SsDoRankTop3Req_test_5fss_2eproto.base,
  &scc_info_SsDoRankTop3Rsp_test_5fss_2eproto.base,
  &scc_info_SsQueryPowerReq_test_5fss_2eproto.base,
  &scc_info_SsQueryPowerRsp_test_5fss_2eproto.base,
  &scc_info_SsReportRankReq_test_5fss_2eproto.base,
  &scc_info_SsReportRankRsp_test_5fss_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_test_5fss_2eproto_once;
static bool descriptor_table_test_5fss_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_5fss_2eproto = {
  &descriptor_table_test_5fss_2eproto_initialized, descriptor_table_protodef_test_5fss_2eproto, "test_ss.proto", 685,
  &descriptor_table_test_5fss_2eproto_once, descriptor_table_test_5fss_2eproto_sccs, descriptor_table_test_5fss_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_test_5fss_2eproto::offsets,
  file_level_metadata_test_5fss_2eproto, 8, file_level_enum_descriptors_test_5fss_2eproto, file_level_service_descriptors_test_5fss_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_test_5fss_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_test_5fss_2eproto), true);
namespace SSP {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnumSsCmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_test_5fss_2eproto);
  return file_level_enum_descriptors_test_5fss_2eproto[0];
}
bool EnumSsCmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SsQueryPowerReq::InitAsDefaultInstance() {
}
class SsQueryPowerReq::_Internal {
 public:
};

SsQueryPowerReq::SsQueryPowerReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSP.SsQueryPowerReq)
}
SsQueryPowerReq::SsQueryPowerReq(const SsQueryPowerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fighterid_ = from.fighterid_;
  // @@protoc_insertion_point(copy_constructor:SSP.SsQueryPowerReq)
}

void SsQueryPowerReq::SharedCtor() {
  fighterid_ = 0u;
}

SsQueryPowerReq::~SsQueryPowerReq() {
  // @@protoc_insertion_point(destructor:SSP.SsQueryPowerReq)
  SharedDtor();
}

void SsQueryPowerReq::SharedDtor() {
}

void SsQueryPowerReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SsQueryPowerReq& SsQueryPowerReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SsQueryPowerReq_test_5fss_2eproto.base);
  return *internal_default_instance();
}


void SsQueryPowerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SSP.SsQueryPowerReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fighterid_ = 0u;
  _internal_metadata_.Clear();
}

const char* SsQueryPowerReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 fighterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fighterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SsQueryPowerReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSP.SsQueryPowerReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fighterid = 1;
  if (this->fighterid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fighterid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSP.SsQueryPowerReq)
  return target;
}

size_t SsQueryPowerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSP.SsQueryPowerReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fighterid = 1;
  if (this->fighterid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fighterid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SsQueryPowerReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSP.SsQueryPowerReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SsQueryPowerReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SsQueryPowerReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSP.SsQueryPowerReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSP.SsQueryPowerReq)
    MergeFrom(*source);
  }
}

void SsQueryPowerReq::MergeFrom(const SsQueryPowerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSP.SsQueryPowerReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fighterid() != 0) {
    _internal_set_fighterid(from._internal_fighterid());
  }
}

void SsQueryPowerReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSP.SsQueryPowerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SsQueryPowerReq::CopyFrom(const SsQueryPowerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSP.SsQueryPowerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SsQueryPowerReq::IsInitialized() const {
  return true;
}

void SsQueryPowerReq::InternalSwap(SsQueryPowerReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fighterid_, other->fighterid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SsQueryPowerReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SsQueryPowerRsp::InitAsDefaultInstance() {
}
class SsQueryPowerRsp::_Internal {
 public:
};

SsQueryPowerRsp::SsQueryPowerRsp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSP.SsQueryPowerRsp)
}
SsQueryPowerRsp::SsQueryPowerRsp(const SsQueryPowerRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&errcode_, &from.errcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&power_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(power_));
  // @@protoc_insertion_point(copy_constructor:SSP.SsQueryPowerRsp)
}

void SsQueryPowerRsp::SharedCtor() {
  ::memset(&errcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_) -
      reinterpret_cast<char*>(&errcode_)) + sizeof(power_));
}

SsQueryPowerRsp::~SsQueryPowerRsp() {
  // @@protoc_insertion_point(destructor:SSP.SsQueryPowerRsp)
  SharedDtor();
}

void SsQueryPowerRsp::SharedDtor() {
}

void SsQueryPowerRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SsQueryPowerRsp& SsQueryPowerRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SsQueryPowerRsp_test_5fss_2eproto.base);
  return *internal_default_instance();
}


void SsQueryPowerRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SSP.SsQueryPowerRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&errcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_) -
      reinterpret_cast<char*>(&errcode_)) + sizeof(power_));
  _internal_metadata_.Clear();
}

const char* SsQueryPowerRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SsQueryPowerRsp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSP.SsQueryPowerRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errcode(), target);
  }

  // uint32 power = 2;
  if (this->power() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSP.SsQueryPowerRsp)
  return target;
}

size_t SsQueryPowerRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSP.SsQueryPowerRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errcode());
  }

  // uint32 power = 2;
  if (this->power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_power());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SsQueryPowerRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSP.SsQueryPowerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SsQueryPowerRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SsQueryPowerRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSP.SsQueryPowerRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSP.SsQueryPowerRsp)
    MergeFrom(*source);
  }
}

void SsQueryPowerRsp::MergeFrom(const SsQueryPowerRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSP.SsQueryPowerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
  if (from.power() != 0) {
    _internal_set_power(from._internal_power());
  }
}

void SsQueryPowerRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSP.SsQueryPowerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SsQueryPowerRsp::CopyFrom(const SsQueryPowerRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSP.SsQueryPowerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SsQueryPowerRsp::IsInitialized() const {
  return true;
}

void SsQueryPowerRsp::InternalSwap(SsQueryPowerRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(errcode_, other->errcode_);
  swap(power_, other->power_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SsQueryPowerRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SsDoFightReq::InitAsDefaultInstance() {
}
class SsDoFightReq::_Internal {
 public:
};

SsDoFightReq::SsDoFightReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSP.SsDoFightReq)
}
SsDoFightReq::SsDoFightReq(const SsDoFightReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fighterid_a_, &from.fighterid_a_,
    static_cast<size_t>(reinterpret_cast<char*>(&power_b_) -
    reinterpret_cast<char*>(&fighterid_a_)) + sizeof(power_b_));
  // @@protoc_insertion_point(copy_constructor:SSP.SsDoFightReq)
}

void SsDoFightReq::SharedCtor() {
  ::memset(&fighterid_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_b_) -
      reinterpret_cast<char*>(&fighterid_a_)) + sizeof(power_b_));
}

SsDoFightReq::~SsDoFightReq() {
  // @@protoc_insertion_point(destructor:SSP.SsDoFightReq)
  SharedDtor();
}

void SsDoFightReq::SharedDtor() {
}

void SsDoFightReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SsDoFightReq& SsDoFightReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SsDoFightReq_test_5fss_2eproto.base);
  return *internal_default_instance();
}


void SsDoFightReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SSP.SsDoFightReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fighterid_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_b_) -
      reinterpret_cast<char*>(&fighterid_a_)) + sizeof(power_b_));
  _internal_metadata_.Clear();
}

const char* SsDoFightReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 fighterid_a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fighterid_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 power_a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          power_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fighterid_b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fighterid_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 power_b = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          power_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SsDoFightReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSP.SsDoFightReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fighterid_a = 1;
  if (this->fighterid_a() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fighterid_a(), target);
  }

  // uint32 power_a = 2;
  if (this->power_a() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_power_a(), target);
  }

  // uint32 fighterid_b = 3;
  if (this->fighterid_b() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fighterid_b(), target);
  }

  // uint32 power_b = 4;
  if (this->power_b() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_power_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSP.SsDoFightReq)
  return target;
}

size_t SsDoFightReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSP.SsDoFightReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fighterid_a = 1;
  if (this->fighterid_a() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fighterid_a());
  }

  // uint32 power_a = 2;
  if (this->power_a() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_power_a());
  }

  // uint32 fighterid_b = 3;
  if (this->fighterid_b() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fighterid_b());
  }

  // uint32 power_b = 4;
  if (this->power_b() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_power_b());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SsDoFightReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSP.SsDoFightReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SsDoFightReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SsDoFightReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSP.SsDoFightReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSP.SsDoFightReq)
    MergeFrom(*source);
  }
}

void SsDoFightReq::MergeFrom(const SsDoFightReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSP.SsDoFightReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fighterid_a() != 0) {
    _internal_set_fighterid_a(from._internal_fighterid_a());
  }
  if (from.power_a() != 0) {
    _internal_set_power_a(from._internal_power_a());
  }
  if (from.fighterid_b() != 0) {
    _internal_set_fighterid_b(from._internal_fighterid_b());
  }
  if (from.power_b() != 0) {
    _internal_set_power_b(from._internal_power_b());
  }
}

void SsDoFightReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSP.SsDoFightReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SsDoFightReq::CopyFrom(const SsDoFightReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSP.SsDoFightReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SsDoFightReq::IsInitialized() const {
  return true;
}

void SsDoFightReq::InternalSwap(SsDoFightReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fighterid_a_, other->fighterid_a_);
  swap(power_a_, other->power_a_);
  swap(fighterid_b_, other->fighterid_b_);
  swap(power_b_, other->power_b_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SsDoFightReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SsDoFightRsp::InitAsDefaultInstance() {
}
class SsDoFightRsp::_Internal {
 public:
};

SsDoFightRsp::SsDoFightRsp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSP.SsDoFightRsp)
}
SsDoFightRsp::SsDoFightRsp(const SsDoFightRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&errcode_, &from.errcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&winnerid_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(winnerid_));
  // @@protoc_insertion_point(copy_constructor:SSP.SsDoFightRsp)
}

void SsDoFightRsp::SharedCtor() {
  ::memset(&errcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winnerid_) -
      reinterpret_cast<char*>(&errcode_)) + sizeof(winnerid_));
}

SsDoFightRsp::~SsDoFightRsp() {
  // @@protoc_insertion_point(destructor:SSP.SsDoFightRsp)
  SharedDtor();
}

void SsDoFightRsp::SharedDtor() {
}

void SsDoFightRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SsDoFightRsp& SsDoFightRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SsDoFightRsp_test_5fss_2eproto.base);
  return *internal_default_instance();
}


void SsDoFightRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SSP.SsDoFightRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&errcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winnerid_) -
      reinterpret_cast<char*>(&errcode_)) + sizeof(winnerid_));
  _internal_metadata_.Clear();
}

const char* SsDoFightRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 winnerid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          winnerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SsDoFightRsp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSP.SsDoFightRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errcode(), target);
  }

  // uint32 winnerid = 2;
  if (this->winnerid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_winnerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSP.SsDoFightRsp)
  return target;
}

size_t SsDoFightRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSP.SsDoFightRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errcode());
  }

  // uint32 winnerid = 2;
  if (this->winnerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_winnerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SsDoFightRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSP.SsDoFightRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SsDoFightRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SsDoFightRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSP.SsDoFightRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSP.SsDoFightRsp)
    MergeFrom(*source);
  }
}

void SsDoFightRsp::MergeFrom(const SsDoFightRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSP.SsDoFightRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
  if (from.winnerid() != 0) {
    _internal_set_winnerid(from._internal_winnerid());
  }
}

void SsDoFightRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSP.SsDoFightRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SsDoFightRsp::CopyFrom(const SsDoFightRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSP.SsDoFightRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SsDoFightRsp::IsInitialized() const {
  return true;
}

void SsDoFightRsp::InternalSwap(SsDoFightRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(errcode_, other->errcode_);
  swap(winnerid_, other->winnerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SsDoFightRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SsReportRankReq::InitAsDefaultInstance() {
}
class SsReportRankReq::_Internal {
 public:
};

SsReportRankReq::SsReportRankReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSP.SsReportRankReq)
}
SsReportRankReq::SsReportRankReq(const SsReportRankReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fighterid_ = from.fighterid_;
  // @@protoc_insertion_point(copy_constructor:SSP.SsReportRankReq)
}

void SsReportRankReq::SharedCtor() {
  fighterid_ = 0u;
}

SsReportRankReq::~SsReportRankReq() {
  // @@protoc_insertion_point(destructor:SSP.SsReportRankReq)
  SharedDtor();
}

void SsReportRankReq::SharedDtor() {
}

void SsReportRankReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SsReportRankReq& SsReportRankReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SsReportRankReq_test_5fss_2eproto.base);
  return *internal_default_instance();
}


void SsReportRankReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SSP.SsReportRankReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fighterid_ = 0u;
  _internal_metadata_.Clear();
}

const char* SsReportRankReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 fighterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fighterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SsReportRankReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSP.SsReportRankReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fighterid = 1;
  if (this->fighterid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fighterid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSP.SsReportRankReq)
  return target;
}

size_t SsReportRankReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSP.SsReportRankReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 fighterid = 1;
  if (this->fighterid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fighterid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SsReportRankReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSP.SsReportRankReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SsReportRankReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SsReportRankReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSP.SsReportRankReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSP.SsReportRankReq)
    MergeFrom(*source);
  }
}

void SsReportRankReq::MergeFrom(const SsReportRankReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSP.SsReportRankReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fighterid() != 0) {
    _internal_set_fighterid(from._internal_fighterid());
  }
}

void SsReportRankReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSP.SsReportRankReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SsReportRankReq::CopyFrom(const SsReportRankReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSP.SsReportRankReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SsReportRankReq::IsInitialized() const {
  return true;
}

void SsReportRankReq::InternalSwap(SsReportRankReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fighterid_, other->fighterid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SsReportRankReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SsReportRankRsp::InitAsDefaultInstance() {
}
class SsReportRankRsp::_Internal {
 public:
};

SsReportRankRsp::SsReportRankRsp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSP.SsReportRankRsp)
}
SsReportRankRsp::SsReportRankRsp(const SsReportRankRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:SSP.SsReportRankRsp)
}

void SsReportRankRsp::SharedCtor() {
  errcode_ = 0;
}

SsReportRankRsp::~SsReportRankRsp() {
  // @@protoc_insertion_point(destructor:SSP.SsReportRankRsp)
  SharedDtor();
}

void SsReportRankRsp::SharedDtor() {
}

void SsReportRankRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SsReportRankRsp& SsReportRankRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SsReportRankRsp_test_5fss_2eproto.base);
  return *internal_default_instance();
}


void SsReportRankRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SSP.SsReportRankRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errcode_ = 0;
  _internal_metadata_.Clear();
}

const char* SsReportRankRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SsReportRankRsp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSP.SsReportRankRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSP.SsReportRankRsp)
  return target;
}

size_t SsReportRankRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSP.SsReportRankRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SsReportRankRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSP.SsReportRankRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SsReportRankRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SsReportRankRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSP.SsReportRankRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSP.SsReportRankRsp)
    MergeFrom(*source);
  }
}

void SsReportRankRsp::MergeFrom(const SsReportRankRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSP.SsReportRankRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void SsReportRankRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSP.SsReportRankRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SsReportRankRsp::CopyFrom(const SsReportRankRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSP.SsReportRankRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SsReportRankRsp::IsInitialized() const {
  return true;
}

void SsReportRankRsp::InternalSwap(SsReportRankRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SsReportRankRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SsDoRankTop3Req::InitAsDefaultInstance() {
}
class SsDoRankTop3Req::_Internal {
 public:
};

SsDoRankTop3Req::SsDoRankTop3Req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSP.SsDoRankTop3Req)
}
SsDoRankTop3Req::SsDoRankTop3Req(const SsDoRankTop3Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_ = from.order_;
  // @@protoc_insertion_point(copy_constructor:SSP.SsDoRankTop3Req)
}

void SsDoRankTop3Req::SharedCtor() {
  order_ = 0;
}

SsDoRankTop3Req::~SsDoRankTop3Req() {
  // @@protoc_insertion_point(destructor:SSP.SsDoRankTop3Req)
  SharedDtor();
}

void SsDoRankTop3Req::SharedDtor() {
}

void SsDoRankTop3Req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SsDoRankTop3Req& SsDoRankTop3Req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SsDoRankTop3Req_test_5fss_2eproto.base);
  return *internal_default_instance();
}


void SsDoRankTop3Req::Clear() {
// @@protoc_insertion_point(message_clear_start:SSP.SsDoRankTop3Req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_ = 0;
  _internal_metadata_.Clear();
}

const char* SsDoRankTop3Req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SsDoRankTop3Req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSP.SsDoRankTop3Req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 order = 1;
  if (this->order() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSP.SsDoRankTop3Req)
  return target;
}

size_t SsDoRankTop3Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSP.SsDoRankTop3Req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 order = 1;
  if (this->order() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_order());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SsDoRankTop3Req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSP.SsDoRankTop3Req)
  GOOGLE_DCHECK_NE(&from, this);
  const SsDoRankTop3Req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SsDoRankTop3Req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSP.SsDoRankTop3Req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSP.SsDoRankTop3Req)
    MergeFrom(*source);
  }
}

void SsDoRankTop3Req::MergeFrom(const SsDoRankTop3Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSP.SsDoRankTop3Req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.order() != 0) {
    _internal_set_order(from._internal_order());
  }
}

void SsDoRankTop3Req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSP.SsDoRankTop3Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SsDoRankTop3Req::CopyFrom(const SsDoRankTop3Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSP.SsDoRankTop3Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SsDoRankTop3Req::IsInitialized() const {
  return true;
}

void SsDoRankTop3Req::InternalSwap(SsDoRankTop3Req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SsDoRankTop3Req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SsDoRankTop3Rsp::InitAsDefaultInstance() {
}
class SsDoRankTop3Rsp::_Internal {
 public:
};

SsDoRankTop3Rsp::SsDoRankTop3Rsp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSP.SsDoRankTop3Rsp)
}
SsDoRankTop3Rsp::SsDoRankTop3Rsp(const SsDoRankTop3Rsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&errcode_, &from.errcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&validnum_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(validnum_));
  // @@protoc_insertion_point(copy_constructor:SSP.SsDoRankTop3Rsp)
}

void SsDoRankTop3Rsp::SharedCtor() {
  ::memset(&errcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validnum_) -
      reinterpret_cast<char*>(&errcode_)) + sizeof(validnum_));
}

SsDoRankTop3Rsp::~SsDoRankTop3Rsp() {
  // @@protoc_insertion_point(destructor:SSP.SsDoRankTop3Rsp)
  SharedDtor();
}

void SsDoRankTop3Rsp::SharedDtor() {
}

void SsDoRankTop3Rsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SsDoRankTop3Rsp& SsDoRankTop3Rsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SsDoRankTop3Rsp_test_5fss_2eproto.base);
  return *internal_default_instance();
}


void SsDoRankTop3Rsp::Clear() {
// @@protoc_insertion_point(message_clear_start:SSP.SsDoRankTop3Rsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  ::memset(&errcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validnum_) -
      reinterpret_cast<char*>(&errcode_)) + sizeof(validnum_));
  _internal_metadata_.Clear();
}

const char* SsDoRankTop3Rsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 validnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          validnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SsDoRankTop3Rsp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSP.SsDoRankTop3Rsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errcode(), target);
  }

  // uint32 validnum = 2;
  if (this->validnum() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_validnum(), target);
  }

  // repeated uint32 ids = 3;
  {
    int byte_size = _ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSP.SsDoRankTop3Rsp)
  return target;
}

size_t SsDoRankTop3Rsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSP.SsDoRankTop3Rsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errcode());
  }

  // uint32 validnum = 2;
  if (this->validnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_validnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SsDoRankTop3Rsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSP.SsDoRankTop3Rsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SsDoRankTop3Rsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SsDoRankTop3Rsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSP.SsDoRankTop3Rsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSP.SsDoRankTop3Rsp)
    MergeFrom(*source);
  }
}

void SsDoRankTop3Rsp::MergeFrom(const SsDoRankTop3Rsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSP.SsDoRankTop3Rsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
  if (from.validnum() != 0) {
    _internal_set_validnum(from._internal_validnum());
  }
}

void SsDoRankTop3Rsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSP.SsDoRankTop3Rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SsDoRankTop3Rsp::CopyFrom(const SsDoRankTop3Rsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSP.SsDoRankTop3Rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SsDoRankTop3Rsp::IsInitialized() const {
  return true;
}

void SsDoRankTop3Rsp::InternalSwap(SsDoRankTop3Rsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(errcode_, other->errcode_);
  swap(validnum_, other->validnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SsDoRankTop3Rsp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SSP
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SSP::SsQueryPowerReq* Arena::CreateMaybeMessage< ::SSP::SsQueryPowerReq >(Arena* arena) {
  return Arena::CreateInternal< ::SSP::SsQueryPowerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SSP::SsQueryPowerRsp* Arena::CreateMaybeMessage< ::SSP::SsQueryPowerRsp >(Arena* arena) {
  return Arena::CreateInternal< ::SSP::SsQueryPowerRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SSP::SsDoFightReq* Arena::CreateMaybeMessage< ::SSP::SsDoFightReq >(Arena* arena) {
  return Arena::CreateInternal< ::SSP::SsDoFightReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SSP::SsDoFightRsp* Arena::CreateMaybeMessage< ::SSP::SsDoFightRsp >(Arena* arena) {
  return Arena::CreateInternal< ::SSP::SsDoFightRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SSP::SsReportRankReq* Arena::CreateMaybeMessage< ::SSP::SsReportRankReq >(Arena* arena) {
  return Arena::CreateInternal< ::SSP::SsReportRankReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SSP::SsReportRankRsp* Arena::CreateMaybeMessage< ::SSP::SsReportRankRsp >(Arena* arena) {
  return Arena::CreateInternal< ::SSP::SsReportRankRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::SSP::SsDoRankTop3Req* Arena::CreateMaybeMessage< ::SSP::SsDoRankTop3Req >(Arena* arena) {
  return Arena::CreateInternal< ::SSP::SsDoRankTop3Req >(arena);
}
template<> PROTOBUF_NOINLINE ::SSP::SsDoRankTop3Rsp* Arena::CreateMaybeMessage< ::SSP::SsDoRankTop3Rsp >(Arena* arena) {
  return Arena::CreateInternal< ::SSP::SsDoRankTop3Rsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
