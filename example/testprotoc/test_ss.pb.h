// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_ss.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_5fss_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_5fss_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_5fss_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_5fss_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_5fss_2eproto;
namespace SSP {
class SsDoFightReq;
class SsDoFightReqDefaultTypeInternal;
extern SsDoFightReqDefaultTypeInternal _SsDoFightReq_default_instance_;
class SsDoFightRsp;
class SsDoFightRspDefaultTypeInternal;
extern SsDoFightRspDefaultTypeInternal _SsDoFightRsp_default_instance_;
class SsDoRankTop3Req;
class SsDoRankTop3ReqDefaultTypeInternal;
extern SsDoRankTop3ReqDefaultTypeInternal _SsDoRankTop3Req_default_instance_;
class SsDoRankTop3Rsp;
class SsDoRankTop3RspDefaultTypeInternal;
extern SsDoRankTop3RspDefaultTypeInternal _SsDoRankTop3Rsp_default_instance_;
class SsQueryPowerReq;
class SsQueryPowerReqDefaultTypeInternal;
extern SsQueryPowerReqDefaultTypeInternal _SsQueryPowerReq_default_instance_;
class SsQueryPowerRsp;
class SsQueryPowerRspDefaultTypeInternal;
extern SsQueryPowerRspDefaultTypeInternal _SsQueryPowerRsp_default_instance_;
class SsReportRankReq;
class SsReportRankReqDefaultTypeInternal;
extern SsReportRankReqDefaultTypeInternal _SsReportRankReq_default_instance_;
class SsReportRankRsp;
class SsReportRankRspDefaultTypeInternal;
extern SsReportRankRspDefaultTypeInternal _SsReportRankRsp_default_instance_;
}  // namespace SSP
PROTOBUF_NAMESPACE_OPEN
template<> ::SSP::SsDoFightReq* Arena::CreateMaybeMessage<::SSP::SsDoFightReq>(Arena*);
template<> ::SSP::SsDoFightRsp* Arena::CreateMaybeMessage<::SSP::SsDoFightRsp>(Arena*);
template<> ::SSP::SsDoRankTop3Req* Arena::CreateMaybeMessage<::SSP::SsDoRankTop3Req>(Arena*);
template<> ::SSP::SsDoRankTop3Rsp* Arena::CreateMaybeMessage<::SSP::SsDoRankTop3Rsp>(Arena*);
template<> ::SSP::SsQueryPowerReq* Arena::CreateMaybeMessage<::SSP::SsQueryPowerReq>(Arena*);
template<> ::SSP::SsQueryPowerRsp* Arena::CreateMaybeMessage<::SSP::SsQueryPowerRsp>(Arena*);
template<> ::SSP::SsReportRankReq* Arena::CreateMaybeMessage<::SSP::SsReportRankReq>(Arena*);
template<> ::SSP::SsReportRankRsp* Arena::CreateMaybeMessage<::SSP::SsReportRankRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SSP {

enum EnumSsCmd : int {
  ss_cmd_begin = 0,
  ss_cmd_query_power_req = 100,
  ss_cmd_query_power_rsp = 101,
  ss_cmd_fight_req = 102,
  ss_cmd_fight_rsp = 103,
  ss_cmd_reportrank_req = 104,
  ss_cmd_reportrank_rsp = 105,
  ss_cmd_query_rank_top3_req = 106,
  ss_cmd_query_rank_top3_rsp = 107,
  EnumSsCmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EnumSsCmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EnumSsCmd_IsValid(int value);
constexpr EnumSsCmd EnumSsCmd_MIN = ss_cmd_begin;
constexpr EnumSsCmd EnumSsCmd_MAX = ss_cmd_query_rank_top3_rsp;
constexpr int EnumSsCmd_ARRAYSIZE = EnumSsCmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnumSsCmd_descriptor();
template<typename T>
inline const std::string& EnumSsCmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnumSsCmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnumSsCmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnumSsCmd_descriptor(), enum_t_value);
}
inline bool EnumSsCmd_Parse(
    const std::string& name, EnumSsCmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnumSsCmd>(
    EnumSsCmd_descriptor(), name, value);
}
// ===================================================================

class SsQueryPowerReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSP.SsQueryPowerReq) */ {
 public:
  SsQueryPowerReq();
  virtual ~SsQueryPowerReq();

  SsQueryPowerReq(const SsQueryPowerReq& from);
  SsQueryPowerReq(SsQueryPowerReq&& from) noexcept
    : SsQueryPowerReq() {
    *this = ::std::move(from);
  }

  inline SsQueryPowerReq& operator=(const SsQueryPowerReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SsQueryPowerReq& operator=(SsQueryPowerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SsQueryPowerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SsQueryPowerReq* internal_default_instance() {
    return reinterpret_cast<const SsQueryPowerReq*>(
               &_SsQueryPowerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SsQueryPowerReq& a, SsQueryPowerReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SsQueryPowerReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SsQueryPowerReq* New() const final {
    return CreateMaybeMessage<SsQueryPowerReq>(nullptr);
  }

  SsQueryPowerReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SsQueryPowerReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SsQueryPowerReq& from);
  void MergeFrom(const SsQueryPowerReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SsQueryPowerReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSP.SsQueryPowerReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fss_2eproto);
    return ::descriptor_table_test_5fss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFighteridFieldNumber = 1,
  };
  // uint32 fighterid = 1;
  void clear_fighterid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fighterid() const;
  void set_fighterid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fighterid() const;
  void _internal_set_fighterid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SSP.SsQueryPowerReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fighterid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fss_2eproto;
};
// -------------------------------------------------------------------

class SsQueryPowerRsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSP.SsQueryPowerRsp) */ {
 public:
  SsQueryPowerRsp();
  virtual ~SsQueryPowerRsp();

  SsQueryPowerRsp(const SsQueryPowerRsp& from);
  SsQueryPowerRsp(SsQueryPowerRsp&& from) noexcept
    : SsQueryPowerRsp() {
    *this = ::std::move(from);
  }

  inline SsQueryPowerRsp& operator=(const SsQueryPowerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SsQueryPowerRsp& operator=(SsQueryPowerRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SsQueryPowerRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SsQueryPowerRsp* internal_default_instance() {
    return reinterpret_cast<const SsQueryPowerRsp*>(
               &_SsQueryPowerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SsQueryPowerRsp& a, SsQueryPowerRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SsQueryPowerRsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SsQueryPowerRsp* New() const final {
    return CreateMaybeMessage<SsQueryPowerRsp>(nullptr);
  }

  SsQueryPowerRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SsQueryPowerRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SsQueryPowerRsp& from);
  void MergeFrom(const SsQueryPowerRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SsQueryPowerRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSP.SsQueryPowerRsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fss_2eproto);
    return ::descriptor_table_test_5fss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrcodeFieldNumber = 1,
    kPowerFieldNumber = 2,
  };
  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 power = 2;
  void clear_power();
  ::PROTOBUF_NAMESPACE_ID::uint32 power() const;
  void set_power(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_power() const;
  void _internal_set_power(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SSP.SsQueryPowerRsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 power_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fss_2eproto;
};
// -------------------------------------------------------------------

class SsDoFightReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSP.SsDoFightReq) */ {
 public:
  SsDoFightReq();
  virtual ~SsDoFightReq();

  SsDoFightReq(const SsDoFightReq& from);
  SsDoFightReq(SsDoFightReq&& from) noexcept
    : SsDoFightReq() {
    *this = ::std::move(from);
  }

  inline SsDoFightReq& operator=(const SsDoFightReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SsDoFightReq& operator=(SsDoFightReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SsDoFightReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SsDoFightReq* internal_default_instance() {
    return reinterpret_cast<const SsDoFightReq*>(
               &_SsDoFightReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SsDoFightReq& a, SsDoFightReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SsDoFightReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SsDoFightReq* New() const final {
    return CreateMaybeMessage<SsDoFightReq>(nullptr);
  }

  SsDoFightReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SsDoFightReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SsDoFightReq& from);
  void MergeFrom(const SsDoFightReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SsDoFightReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSP.SsDoFightReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fss_2eproto);
    return ::descriptor_table_test_5fss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFighteridAFieldNumber = 1,
    kPowerAFieldNumber = 2,
    kFighteridBFieldNumber = 3,
    kPowerBFieldNumber = 4,
  };
  // uint32 fighterid_a = 1;
  void clear_fighterid_a();
  ::PROTOBUF_NAMESPACE_ID::uint32 fighterid_a() const;
  void set_fighterid_a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fighterid_a() const;
  void _internal_set_fighterid_a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 power_a = 2;
  void clear_power_a();
  ::PROTOBUF_NAMESPACE_ID::uint32 power_a() const;
  void set_power_a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_power_a() const;
  void _internal_set_power_a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fighterid_b = 3;
  void clear_fighterid_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 fighterid_b() const;
  void set_fighterid_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fighterid_b() const;
  void _internal_set_fighterid_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 power_b = 4;
  void clear_power_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 power_b() const;
  void set_power_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_power_b() const;
  void _internal_set_power_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SSP.SsDoFightReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fighterid_a_;
  ::PROTOBUF_NAMESPACE_ID::uint32 power_a_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fighterid_b_;
  ::PROTOBUF_NAMESPACE_ID::uint32 power_b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fss_2eproto;
};
// -------------------------------------------------------------------

class SsDoFightRsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSP.SsDoFightRsp) */ {
 public:
  SsDoFightRsp();
  virtual ~SsDoFightRsp();

  SsDoFightRsp(const SsDoFightRsp& from);
  SsDoFightRsp(SsDoFightRsp&& from) noexcept
    : SsDoFightRsp() {
    *this = ::std::move(from);
  }

  inline SsDoFightRsp& operator=(const SsDoFightRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SsDoFightRsp& operator=(SsDoFightRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SsDoFightRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SsDoFightRsp* internal_default_instance() {
    return reinterpret_cast<const SsDoFightRsp*>(
               &_SsDoFightRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SsDoFightRsp& a, SsDoFightRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SsDoFightRsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SsDoFightRsp* New() const final {
    return CreateMaybeMessage<SsDoFightRsp>(nullptr);
  }

  SsDoFightRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SsDoFightRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SsDoFightRsp& from);
  void MergeFrom(const SsDoFightRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SsDoFightRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSP.SsDoFightRsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fss_2eproto);
    return ::descriptor_table_test_5fss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrcodeFieldNumber = 1,
    kWinneridFieldNumber = 2,
  };
  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 winnerid = 2;
  void clear_winnerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 winnerid() const;
  void set_winnerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_winnerid() const;
  void _internal_set_winnerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SSP.SsDoFightRsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 winnerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fss_2eproto;
};
// -------------------------------------------------------------------

class SsReportRankReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSP.SsReportRankReq) */ {
 public:
  SsReportRankReq();
  virtual ~SsReportRankReq();

  SsReportRankReq(const SsReportRankReq& from);
  SsReportRankReq(SsReportRankReq&& from) noexcept
    : SsReportRankReq() {
    *this = ::std::move(from);
  }

  inline SsReportRankReq& operator=(const SsReportRankReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SsReportRankReq& operator=(SsReportRankReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SsReportRankReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SsReportRankReq* internal_default_instance() {
    return reinterpret_cast<const SsReportRankReq*>(
               &_SsReportRankReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SsReportRankReq& a, SsReportRankReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SsReportRankReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SsReportRankReq* New() const final {
    return CreateMaybeMessage<SsReportRankReq>(nullptr);
  }

  SsReportRankReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SsReportRankReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SsReportRankReq& from);
  void MergeFrom(const SsReportRankReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SsReportRankReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSP.SsReportRankReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fss_2eproto);
    return ::descriptor_table_test_5fss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFighteridFieldNumber = 1,
  };
  // uint32 fighterid = 1;
  void clear_fighterid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fighterid() const;
  void set_fighterid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fighterid() const;
  void _internal_set_fighterid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SSP.SsReportRankReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fighterid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fss_2eproto;
};
// -------------------------------------------------------------------

class SsReportRankRsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSP.SsReportRankRsp) */ {
 public:
  SsReportRankRsp();
  virtual ~SsReportRankRsp();

  SsReportRankRsp(const SsReportRankRsp& from);
  SsReportRankRsp(SsReportRankRsp&& from) noexcept
    : SsReportRankRsp() {
    *this = ::std::move(from);
  }

  inline SsReportRankRsp& operator=(const SsReportRankRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SsReportRankRsp& operator=(SsReportRankRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SsReportRankRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SsReportRankRsp* internal_default_instance() {
    return reinterpret_cast<const SsReportRankRsp*>(
               &_SsReportRankRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SsReportRankRsp& a, SsReportRankRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SsReportRankRsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SsReportRankRsp* New() const final {
    return CreateMaybeMessage<SsReportRankRsp>(nullptr);
  }

  SsReportRankRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SsReportRankRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SsReportRankRsp& from);
  void MergeFrom(const SsReportRankRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SsReportRankRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSP.SsReportRankRsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fss_2eproto);
    return ::descriptor_table_test_5fss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrcodeFieldNumber = 1,
  };
  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SSP.SsReportRankRsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fss_2eproto;
};
// -------------------------------------------------------------------

class SsDoRankTop3Req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSP.SsDoRankTop3Req) */ {
 public:
  SsDoRankTop3Req();
  virtual ~SsDoRankTop3Req();

  SsDoRankTop3Req(const SsDoRankTop3Req& from);
  SsDoRankTop3Req(SsDoRankTop3Req&& from) noexcept
    : SsDoRankTop3Req() {
    *this = ::std::move(from);
  }

  inline SsDoRankTop3Req& operator=(const SsDoRankTop3Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline SsDoRankTop3Req& operator=(SsDoRankTop3Req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SsDoRankTop3Req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SsDoRankTop3Req* internal_default_instance() {
    return reinterpret_cast<const SsDoRankTop3Req*>(
               &_SsDoRankTop3Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SsDoRankTop3Req& a, SsDoRankTop3Req& b) {
    a.Swap(&b);
  }
  inline void Swap(SsDoRankTop3Req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SsDoRankTop3Req* New() const final {
    return CreateMaybeMessage<SsDoRankTop3Req>(nullptr);
  }

  SsDoRankTop3Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SsDoRankTop3Req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SsDoRankTop3Req& from);
  void MergeFrom(const SsDoRankTop3Req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SsDoRankTop3Req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSP.SsDoRankTop3Req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fss_2eproto);
    return ::descriptor_table_test_5fss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // int32 order = 1;
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::int32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_order() const;
  void _internal_set_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SSP.SsDoRankTop3Req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fss_2eproto;
};
// -------------------------------------------------------------------

class SsDoRankTop3Rsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSP.SsDoRankTop3Rsp) */ {
 public:
  SsDoRankTop3Rsp();
  virtual ~SsDoRankTop3Rsp();

  SsDoRankTop3Rsp(const SsDoRankTop3Rsp& from);
  SsDoRankTop3Rsp(SsDoRankTop3Rsp&& from) noexcept
    : SsDoRankTop3Rsp() {
    *this = ::std::move(from);
  }

  inline SsDoRankTop3Rsp& operator=(const SsDoRankTop3Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SsDoRankTop3Rsp& operator=(SsDoRankTop3Rsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SsDoRankTop3Rsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SsDoRankTop3Rsp* internal_default_instance() {
    return reinterpret_cast<const SsDoRankTop3Rsp*>(
               &_SsDoRankTop3Rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SsDoRankTop3Rsp& a, SsDoRankTop3Rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SsDoRankTop3Rsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SsDoRankTop3Rsp* New() const final {
    return CreateMaybeMessage<SsDoRankTop3Rsp>(nullptr);
  }

  SsDoRankTop3Rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SsDoRankTop3Rsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SsDoRankTop3Rsp& from);
  void MergeFrom(const SsDoRankTop3Rsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SsDoRankTop3Rsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSP.SsDoRankTop3Rsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fss_2eproto);
    return ::descriptor_table_test_5fss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 3,
    kErrcodeFieldNumber = 1,
    kValidnumFieldNumber = 2,
  };
  // repeated uint32 ids = 3;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ids() const;
  void _internal_add_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ids(int index) const;
  void set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ids();

  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 validnum = 2;
  void clear_validnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 validnum() const;
  void set_validnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_validnum() const;
  void _internal_set_validnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SSP.SsDoRankTop3Rsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 validnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fss_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SsQueryPowerReq

// uint32 fighterid = 1;
inline void SsQueryPowerReq::clear_fighterid() {
  fighterid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsQueryPowerReq::_internal_fighterid() const {
  return fighterid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsQueryPowerReq::fighterid() const {
  // @@protoc_insertion_point(field_get:SSP.SsQueryPowerReq.fighterid)
  return _internal_fighterid();
}
inline void SsQueryPowerReq::_internal_set_fighterid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fighterid_ = value;
}
inline void SsQueryPowerReq::set_fighterid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fighterid(value);
  // @@protoc_insertion_point(field_set:SSP.SsQueryPowerReq.fighterid)
}

// -------------------------------------------------------------------

// SsQueryPowerRsp

// int32 errcode = 1;
inline void SsQueryPowerRsp::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SsQueryPowerRsp::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SsQueryPowerRsp::errcode() const {
  // @@protoc_insertion_point(field_get:SSP.SsQueryPowerRsp.errcode)
  return _internal_errcode();
}
inline void SsQueryPowerRsp::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void SsQueryPowerRsp::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:SSP.SsQueryPowerRsp.errcode)
}

// uint32 power = 2;
inline void SsQueryPowerRsp::clear_power() {
  power_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsQueryPowerRsp::_internal_power() const {
  return power_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsQueryPowerRsp::power() const {
  // @@protoc_insertion_point(field_get:SSP.SsQueryPowerRsp.power)
  return _internal_power();
}
inline void SsQueryPowerRsp::_internal_set_power(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  power_ = value;
}
inline void SsQueryPowerRsp::set_power(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:SSP.SsQueryPowerRsp.power)
}

// -------------------------------------------------------------------

// SsDoFightReq

// uint32 fighterid_a = 1;
inline void SsDoFightReq::clear_fighterid_a() {
  fighterid_a_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsDoFightReq::_internal_fighterid_a() const {
  return fighterid_a_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsDoFightReq::fighterid_a() const {
  // @@protoc_insertion_point(field_get:SSP.SsDoFightReq.fighterid_a)
  return _internal_fighterid_a();
}
inline void SsDoFightReq::_internal_set_fighterid_a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fighterid_a_ = value;
}
inline void SsDoFightReq::set_fighterid_a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fighterid_a(value);
  // @@protoc_insertion_point(field_set:SSP.SsDoFightReq.fighterid_a)
}

// uint32 power_a = 2;
inline void SsDoFightReq::clear_power_a() {
  power_a_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsDoFightReq::_internal_power_a() const {
  return power_a_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsDoFightReq::power_a() const {
  // @@protoc_insertion_point(field_get:SSP.SsDoFightReq.power_a)
  return _internal_power_a();
}
inline void SsDoFightReq::_internal_set_power_a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  power_a_ = value;
}
inline void SsDoFightReq::set_power_a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_power_a(value);
  // @@protoc_insertion_point(field_set:SSP.SsDoFightReq.power_a)
}

// uint32 fighterid_b = 3;
inline void SsDoFightReq::clear_fighterid_b() {
  fighterid_b_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsDoFightReq::_internal_fighterid_b() const {
  return fighterid_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsDoFightReq::fighterid_b() const {
  // @@protoc_insertion_point(field_get:SSP.SsDoFightReq.fighterid_b)
  return _internal_fighterid_b();
}
inline void SsDoFightReq::_internal_set_fighterid_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fighterid_b_ = value;
}
inline void SsDoFightReq::set_fighterid_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fighterid_b(value);
  // @@protoc_insertion_point(field_set:SSP.SsDoFightReq.fighterid_b)
}

// uint32 power_b = 4;
inline void SsDoFightReq::clear_power_b() {
  power_b_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsDoFightReq::_internal_power_b() const {
  return power_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsDoFightReq::power_b() const {
  // @@protoc_insertion_point(field_get:SSP.SsDoFightReq.power_b)
  return _internal_power_b();
}
inline void SsDoFightReq::_internal_set_power_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  power_b_ = value;
}
inline void SsDoFightReq::set_power_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_power_b(value);
  // @@protoc_insertion_point(field_set:SSP.SsDoFightReq.power_b)
}

// -------------------------------------------------------------------

// SsDoFightRsp

// int32 errcode = 1;
inline void SsDoFightRsp::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SsDoFightRsp::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SsDoFightRsp::errcode() const {
  // @@protoc_insertion_point(field_get:SSP.SsDoFightRsp.errcode)
  return _internal_errcode();
}
inline void SsDoFightRsp::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void SsDoFightRsp::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:SSP.SsDoFightRsp.errcode)
}

// uint32 winnerid = 2;
inline void SsDoFightRsp::clear_winnerid() {
  winnerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsDoFightRsp::_internal_winnerid() const {
  return winnerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsDoFightRsp::winnerid() const {
  // @@protoc_insertion_point(field_get:SSP.SsDoFightRsp.winnerid)
  return _internal_winnerid();
}
inline void SsDoFightRsp::_internal_set_winnerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  winnerid_ = value;
}
inline void SsDoFightRsp::set_winnerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_winnerid(value);
  // @@protoc_insertion_point(field_set:SSP.SsDoFightRsp.winnerid)
}

// -------------------------------------------------------------------

// SsReportRankReq

// uint32 fighterid = 1;
inline void SsReportRankReq::clear_fighterid() {
  fighterid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsReportRankReq::_internal_fighterid() const {
  return fighterid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsReportRankReq::fighterid() const {
  // @@protoc_insertion_point(field_get:SSP.SsReportRankReq.fighterid)
  return _internal_fighterid();
}
inline void SsReportRankReq::_internal_set_fighterid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fighterid_ = value;
}
inline void SsReportRankReq::set_fighterid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fighterid(value);
  // @@protoc_insertion_point(field_set:SSP.SsReportRankReq.fighterid)
}

// -------------------------------------------------------------------

// SsReportRankRsp

// int32 errcode = 1;
inline void SsReportRankRsp::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SsReportRankRsp::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SsReportRankRsp::errcode() const {
  // @@protoc_insertion_point(field_get:SSP.SsReportRankRsp.errcode)
  return _internal_errcode();
}
inline void SsReportRankRsp::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void SsReportRankRsp::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:SSP.SsReportRankRsp.errcode)
}

// -------------------------------------------------------------------

// SsDoRankTop3Req

// int32 order = 1;
inline void SsDoRankTop3Req::clear_order() {
  order_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SsDoRankTop3Req::_internal_order() const {
  return order_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SsDoRankTop3Req::order() const {
  // @@protoc_insertion_point(field_get:SSP.SsDoRankTop3Req.order)
  return _internal_order();
}
inline void SsDoRankTop3Req::_internal_set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  order_ = value;
}
inline void SsDoRankTop3Req::set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:SSP.SsDoRankTop3Req.order)
}

// -------------------------------------------------------------------

// SsDoRankTop3Rsp

// int32 errcode = 1;
inline void SsDoRankTop3Rsp::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SsDoRankTop3Rsp::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SsDoRankTop3Rsp::errcode() const {
  // @@protoc_insertion_point(field_get:SSP.SsDoRankTop3Rsp.errcode)
  return _internal_errcode();
}
inline void SsDoRankTop3Rsp::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void SsDoRankTop3Rsp::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:SSP.SsDoRankTop3Rsp.errcode)
}

// uint32 validnum = 2;
inline void SsDoRankTop3Rsp::clear_validnum() {
  validnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsDoRankTop3Rsp::_internal_validnum() const {
  return validnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsDoRankTop3Rsp::validnum() const {
  // @@protoc_insertion_point(field_get:SSP.SsDoRankTop3Rsp.validnum)
  return _internal_validnum();
}
inline void SsDoRankTop3Rsp::_internal_set_validnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  validnum_ = value;
}
inline void SsDoRankTop3Rsp::set_validnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_validnum(value);
  // @@protoc_insertion_point(field_set:SSP.SsDoRankTop3Rsp.validnum)
}

// repeated uint32 ids = 3;
inline int SsDoRankTop3Rsp::_internal_ids_size() const {
  return ids_.size();
}
inline int SsDoRankTop3Rsp::ids_size() const {
  return _internal_ids_size();
}
inline void SsDoRankTop3Rsp::clear_ids() {
  ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsDoRankTop3Rsp::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SsDoRankTop3Rsp::ids(int index) const {
  // @@protoc_insertion_point(field_get:SSP.SsDoRankTop3Rsp.ids)
  return _internal_ids(index);
}
inline void SsDoRankTop3Rsp::set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:SSP.SsDoRankTop3Rsp.ids)
}
inline void SsDoRankTop3Rsp::_internal_add_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ids_.Add(value);
}
inline void SsDoRankTop3Rsp::add_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:SSP.SsDoRankTop3Rsp.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SsDoRankTop3Rsp::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SsDoRankTop3Rsp::ids() const {
  // @@protoc_insertion_point(field_list:SSP.SsDoRankTop3Rsp.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SsDoRankTop3Rsp::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SsDoRankTop3Rsp::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:SSP.SsDoRankTop3Rsp.ids)
  return _internal_mutable_ids();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SSP

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SSP::EnumSsCmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSP::EnumSsCmd>() {
  return ::SSP::EnumSsCmd_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_5fss_2eproto
